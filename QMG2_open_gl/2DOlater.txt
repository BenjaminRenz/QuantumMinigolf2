
void createPlane(){
    #define Resolution 256
    #define VertBufSize 196608          //3* (xyz) Resolution squared
    #define IndexBufSize 390150 //(Res-1)**2  *6
    #define ScaleFact 400
    //
    GLuint vertexBufferId=0;
    GLuint indexBufferId=0;
    //Generate Vertex Positions
    printf("%d",VertBufSize);
    /*float plane_vertices[VertBufSize];
    long vert_index=0;
    for(int z=0;z<Resolution;z++){
        for(int x=0;x<Resolution;x++){
            plane_vertices[vert_index++]=((float)x)/ScaleFact;
            plane_vertices[vert_index++]=0.0f; //Set height (y) to zero
            plane_vertices[vert_index++]=((float)z)/ScaleFact;
        }
    }


    glGenBuffers(1, &vertexBufferId);                                                          //create buffer
    glBindBuffer(GL_ARRAY_BUFFER, vertexBufferId);                                            //Link buffer
    glBufferData(GL_ARRAY_BUFFER, sizeof(plane_vertices)/sizeof(*plane_vertices),plane_vertices,GL_STATIC_DRAW);    //Upload data to Buffer

    //Vertex data is set only once and drawn regularly, hence we use GL_STATIC_DRAW

    //Set data format for gpu and enable position attribute
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE, sizeof(float)*3,0);


    //Generate Triangles
    GLuint plane_indices[IndexBufSize];
    vert_index=0;
    for(unsigned int z=0;z<(Resolution-1);z++){
        for(unsigned int x=0;x<(Resolution-1);x++){
            //Generate first triangle
            plane_indices[vert_index++]=x+(z*Resolution);   //Vertex lower left first triangle
            plane_indices[vert_index++]=x+1+((z+1)*Resolution); //Vertex upper right first triangle
            plane_indices[vert_index++]=x+((z+1)*Resolution); //Vertex upper left first triangle
            //Generate second triangle
            plane_indices[vert_index++]=x+(z*Resolution);   //Vertex lower left second triangle
            plane_indices[vert_index++]=x+((z+1)*Resolution); //Vertex lower right second triangle
            plane_indices[vert_index++]=x+1+((z+1)*Resolution); //Vertex upper right first triangle
        }
    }
    glGenBuffers(1, &indexBufferId);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferId);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(plane_indices)/sizeof(*plane_indices),plane_indices,GL_STATIC_DRAW);
    //Shader creation


}








void createCube(){
    GLfloat cube_vertices[] = {
        -1.0f,-1.0f,-1.0f, // triangle 1 : begin
        -1.0f,-1.0f, 1.0f,
        -1.0f, 1.0f, 1.0f, // triangle 1 : end
        1.0f, 1.0f,-1.0f, // triangle 2 : begin
        -1.0f,-1.0f,-1.0f,
        -1.0f, 1.0f,-1.0f, // triangle 2 : end
        1.0f,-1.0f, 1.0f,
        -1.0f,-1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        1.0f, 1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        -1.0f,-1.0f,-1.0f,
        -1.0f,-1.0f,-1.0f,
        -1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f,-1.0f,
        1.0f,-1.0f, 1.0f,
        -1.0f,-1.0f, 1.0f,
        -1.0f,-1.0f,-1.0f,
        -1.0f, 1.0f, 1.0f,
        -1.0f,-1.0f, 1.0f,
        1.0f,-1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        1.0f,-1.0f,-1.0f,
        1.0f, 1.0f,-1.0f,
        1.0f,-1.0f,-1.0f,
        1.0f, 1.0f, 1.0f,
        1.0f,-1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        1.0f, 1.0f,-1.0f,
        -1.0f, 1.0f,-1.0f,
        1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f,-1.0f,
        -1.0f, 1.0f, 1.0f,
        1.0f, 1.0f, 1.0f,
        -1.0f, 1.0f, 1.0f,
        1.0f,-1.0f, 1.0f
    };
    GLuint vertex_buffer_id = 0;
    glGenBuffers(1,&vertex_buffer_id);
    glBindBuffer(GL_VERTEX_ARRAY,vertex_buffer_id);
    glBufferData(GL_VERTEX_ARRAY,sizeof(cube_vertices)/sizeof(*cube_vertices),cube_vertices,GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
    glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,0,NULL);
}
